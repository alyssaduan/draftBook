template <typename T, typename... Args>
auto createObject(Args&&... args) {
    if constexpr (std::is_pointer_v<T>) {
        // Case: T is a raw pointer (e.g., R0Key*)
        return new std::remove_pointer_t<T>(std::forward<Args>(args)...);
    } else {
        // Case: T is a smart pointer (e.g., std::unique_ptr<R0Key>, std::shared_ptr<R0Key>)
        return T(new typename T::element_type(std::forward<Args>(args)...));
    }
}
